package main

import (
    "fmt"
    "sync"
)

// Counter представляет счетчик с мьютексом для безопасного доступа из нескольких горутин
type Counter struct {
    mu    sync.Mutex // Мьютекс для обеспечения безопасности доступа к значению счетчика
    value int        // Значение счетчика
}

// Increment инкрементирует значение счетчика
func (c *Counter) Increment() {
    c.mu.Lock()   // Захватываем мьютекс перед доступом к общему ресурсу
    c.value++     // Инкрементируем значение счетчика
    c.mu.Unlock() // Освобождаем мьютекс после использования
}

// Value возвращает текущее значение счетчика
func (c *Counter) Value() int {
    c.mu.Lock()         // Захватываем мьютекс перед доступом к общему ресурсу
    defer c.mu.Unlock() // Освобождаем мьютекс после использования с помощью defer
    return c.value      // Возвращаем текущее значение счетчика
}

func main() {
    var wg sync.WaitGroup // WaitGroup для ожидания завершения всех горутин
    counter := &Counter{} // Создаем экземпляр Counter
    numGoroutines := 520  // Количество горутин

    // Создаем указанное количество горутин
    for i := 0; i < numGoroutines; i++ {
        wg.Add(1) // Увеличиваем счетчик WaitGroup
        go func() {
            defer wg.Done() // Уменьшаем счетчик WaitGroup после завершения горутины
            counter.Increment() // Инкрементируем значение счетчика
        }()
    }

    wg.Wait() // Ждем завершения всех горутин
    fmt.Println("Итоговое значение счетчика:", counter.Value()) // Выводим итоговое значение счетчика
}
